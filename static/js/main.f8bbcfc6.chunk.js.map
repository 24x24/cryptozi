{"version":3,"sources":["App.js","index.js"],"names":["CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","console","log","useEffect","checkIfWalletIsConnected","a","window","ethereum","request","method","accounts","length","account","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","ZiNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","className","alt","src","width","height","onClick","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8bbcfc6.chunk.js","sourcesContent":["import './styles/App.css';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport ZiNft from './utils/ZiNFT.json';\n\nconst TOTAL_MINT_COUNT = 50;\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_ADDRESS = \"0xeb261433379A89856B01AAc67FD23cF7b0F11083\";\n\nconst App = () => {\n\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n\n    console.log(\"#1.1 State currentAccount Load\");\n\n    useEffect(() => {\n        checkIfWalletIsConnected();\n    }, []);\n\n    console.log(\"#1.2 Effect checkIfWalletIsConnected Load\");\n    \n    const checkIfWalletIsConnected = async () => {\n\n      console.log(\"#2 Run checkIfWalletIsConnected()\");\n\n      const { ethereum } = window;\n\n      if (!ethereum) {\n          console.log(\"Make sure you have metamask!\");\n          return;\n      } else {\n          console.log(\"#2.1 We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"#2.2 Found an authorized account:\", account);\n          setCurrentAccount(account)\n          \n          // Setup listener! This is for the case where a user comes to our site\n          // and ALREADY had their wallet connected + authorized.\n          console.log(\"#2.3  setupEventListener after checkIfWalletIsConnected\");\n          setupEventListener()\n          \n      } else {\n          console.log(\"#2.4 No authorized account found\")\n      }\n  }\n\n  const connectWallet = async () => {\n\n    console.log(\"#3 connectWallet\");\n\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"#3.1 Connected & Run setCurrentAccount()\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      console.log(\"#3.2 setupEventListener after Connected\");\n      setupEventListener() \n      \n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n\n    console.log(\"#4 setupEventListener\");\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, ZiNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"#4.1  connectedContract.on\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n\n    console.log(\"#5 askContractToMintNft\");\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, ZiNft.abi, signer);\n\n        console.log(\"#5.1 Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"#5.2 Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n\n  const renderNotConnectedContainer = () => (\n    <div>\n      {console.log(\"#1.4 connectWallet Button Load\")}\n      <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n        Connect to Wallet\n      </button>\n    </div>\n  );\n\n  const renderMintUI = () => (\n    <div>\n      {console.log(\"#1.5 askContractToMintNft Button Load\")}\n      <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n        Mint on Rinkeby Testnet\n      </button>\n    </div>\n  )\n\n  return (\n    <div className=\"App\">\n    {console.log(\"#1.3 App HTML Load\")}\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">CryptoZi</p>\n          <p className=\"sub-text\">\n            Chinese characters, also called Zi, are the oldest continuously used system of writing in the world.\n            <br /><br /> Each CryptoZi is manually created, unique and stored on IPFS permanently. \n          </p>\n        </div>\n\n        <div className=\"image-container\">\n          <img alt=\"zi\" className=\"\" src=\"https://gateway.pinata.cloud/ipfs/QmZF3Ai7m3fvwCx6JVd6GdCBTfCwvJYuGFWT3EHzrFnkdr\" width=\"64\" height=\"64\" />\n          <img alt=\"zi\" className=\"\" src=\"https://gateway.pinata.cloud/ipfs/QmXRZnVUWMMgpnQrzZvJ8Q6TwGRWzLgAUU4e3oBMsV9fKk\" width=\"64\" height=\"64\" />\n          <img alt=\"zi\" className=\"\" src=\"https://gateway.pinata.cloud/ipfs/QmRQyeJ1fFAF1JDJoEm3kkH7e7h8PWHJkSMaQQxm84YPfX\" width=\"64\" height=\"64\" />\n          <img alt=\"zi\" className=\"\" src=\"https://gateway.pinata.cloud/ipfs/QmUnYvRbkyYtPwFfDPQowGhywdYNoiAZRTKsKrWASkLgNe\" width=\"64\" height=\"64\" />\n          <img alt=\"zi\" className=\"\" src=\"https://gateway.pinata.cloud/ipfs/Qmc7mKMgurMiM8CGjiHHvNMtGm1AtYvbUQqpXNLDbtX8wh\" width=\"64\" height=\"64\" />\n          <img alt=\"zi\" className=\"\" src=\"https://gateway.pinata.cloud/ipfs/QmTWpPyuKxu6hQKbsxn1fkX2thDSumAt6TQBgWugyMnN1c\" width=\"64\" height=\"64\" />        \n        </div>\n\n        <div className=\"button-container\">\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n        </div>\n\n        <p className=\"p-text\">\n          If you want to get your lucky word, last name, or anything special minted as CryptoZi,  get in contact. \n        </p>\n\n        <div className=\"footer-container\">\n\n          <a href=\"https://twitter.com/_24x24_\">\n          <img src=\"./twitter.svg\" alt=\"Twitter\" width=\"32\" height=\"32\" />\n          </a>\n\n          <a href=\"https://opensea.io/collection/cryptozi\">\n          <img src=\"./opensea.svg\" alt=\"Opensea\" width=\"32\" height=\"32\" />\n          </a>\n          \n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}